---- Client State ----
Attempting to initiate a connection with server
	
Setting up
	- Load assets
	- receive controlled actor
	- receive initial world state

	(receives data from server, replies with ACK, then shifts state)


Game Loop
	- Begin counting simulation steps upon first replication

	(If game over message is received)


Game End
	- Receives Score and displays it
	- no longer communicating with server



---- Server State ----

Waiting for player to connect
	- Receiving and replying-to connect messages
	- Initializing Player state (sending player controlled actor id. Sending world state)
	- NOT simulating world yet. (no simulation step counter)
	- Once first player joins, timer is set. Callback changes to next state

	(Timer set upon first player connecting expires and changes to next state)


Setting Players Up
	- Players must load assets
	- Players must receive their controlled actor
	- Players must receive initial state of the world	

	(Server receives ACK from each client)
	(if all clients fail ack, close program)


Game loop
	- Players begin counting simulation steps upon receiving first simulation message
		(What if first message is missing? Haven't thought about desync yet)
	- between 1-4 players are alive at any given time
	- Scoring & Timing is occurring
	- Game difficulty is increasing somehow
	- Respawn Timers are active. Players can respawn

	(if all players are dead, next state)

Score is Sent to players









----- NOTES -----
I can have separate loops for each state
		OR
I can modify a single loop for each state

The first option is obviously cleaner, and shouldn't present any additional computational overhead





Clients must allow connection attempt before loading assets. This is a side effect of the way I have coded the program.
Thus, loading must occur AFTER a connection is established. This is obviously a design flaw




Future ID objects should also be able to be set to null. This is useful in cases like those of the proxies, where it feels dangerous
having no option to denote that the ID should not be used








----- Server to Client Replication Issue -----
Are the Server-Actors being Destroyed?
	> Yes

Is the client receiving the correct number of actors?
	> The client can only handle 3 actors. After that, a 4th actor is being sent (proof below) but not being properly replicated by the client.


	> Proof that the non-rendered actor is being sent by the server
		> The moment the client successfully destroys a 3rd actor, the other actor immediately becomes rendered

Is the size of the client-buffer, which stores the incoming actor data, correctly sized?
	> NO! It was arbitrarily set to 200. This number must be properly selected


