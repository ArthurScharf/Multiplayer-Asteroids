Client's send updates for how they're moving as often
as they can. The server only processes all of these
once in a while



-- Dead Reckoning --
At each fixex-time-step, the client is updated on
the current trajectory of each actor.

The client predicts the position of each actor 
by assuming it will maintain it's current heading
and velocity.

What if the clients controlling these actors are making
turns or accelerating? Apparently we're good as long as
the new updates aren't so badly off that they make no 
sense (the new actor update has turned more than is 
possible)



Dead reckoning doesn't work for twitch movement games like
shooters where character's can change velocity instantly.

To fix this, the client must see the other actors
behind in time. We don't see the most recent available
state of the other clients, we see the interpolation
of the second most recent state to the first most recent
state. So long as the frequency of updates are very small
the discrepency between states will be minimal




Each frame of processed data is sent to the server as an input.
This way, each frame doesn't need a time difference from
the beginning of the FFU to decide when it's executed
Regardless of when updates were performed, so long as the same
set of updates were performed, the worlds should
be fixed

This isn't true. Delta time will differ on the client and
the server



-- Reconciliation --
Client requests include a step-stamp.

The server is doing FFUs. 

The client stores each request it makes.

The server processes these requests in batches, responding
with the most recently processed action, paired with
the state of the game at that timestep.

The client discards all timesteps that have been
acknowledged, then reapplies all non-acknowledged timesteps
from the most recently acknowledged timestep state.

This reapplication is client-side reconciliation.

Whenever an FFU occurs, the client pops the acknowledged
states, sets the most recent correct state (the one
the server just acknowledged) then reapplies all previously
un-ACKed inputs to get the current state of the program.



-- Question: Does delta_time from most recent timestep matter? --
For the peers, no. 

If upon FFU n ending I move right 3 units, then wait until FFU n+1, my final position is the same as if I'd waited until the end of FFU n end window
to move 3 units right.

While Synchronization may be a little weird, if FFUs are fast enough, this won't be an issue



QUESTION: Won't differing delta time calculations between clients mean the distance the client travels will be non-deterministic between clients?

> Restating the issue: previous writing in this document assumed that the client-requests only contained some kind of input data. We want determinism 
  for both the predicted client simulation, and the server simulation. The issue is that the client requests being only movement inputs means
  the server doesn't know how much the client moved within it's own simulation, because the server doesn't have that client's delta time.
  We can't send the client's delta time for each of it's updates because this data can't be trusted.
  
  Additionally, how does the server how much to move the character for each input? Is it a constant amount?

SOLUTION: You can't do anything. You must accept the client will be off slightly and hope the difference isn't significant











----- Design ------
Each loop of the main simulation on the client will store all inputs for that frame.

char
0000 0000
	1 : up
       1  : down
      1   : left
     1    : right
   1      : shoot


client maintains a container of inputs it's generated, each with their own state ID. 

These IDs loop when we reach max ID

Size of container is smaller than total possible IDs. --> 0 and max ID can never exist in same container

each state is stored with a char for inputs, and an unsigned int for the request ID.
TOTAL SIZE = 40 bits = 5 bytes

client sends input requests (IF they exist) for each frame an input exists. It also updates it's own position locally as a prediction of what will happen.

server receives inputs and stores them for that FFU. When the FFU occurs, the stored updates are processed and the world state is returned.

Server must personalize each reply message per client with that client's appropriately most recently processed input.



0000 0000
	    1 : up
       1  : down
      1   : left
     1    : right
   1      : shoot
client_update
{
	unsigned int update_id;
	char input_bit_string;
}


// Wrapper for gameState. Sent to each client
server_output_state
{
	unsigned int most_recent_acknowledged_update_id;
	gameState state;
}

gameState
{
	network relevant properties for each actor
}


{ -- RANDOM NOTE --
 UE4 sees the player controller as the object that handles networking because
 user input is what is used to communicate with the server.
}












-- RE-Design: How do we store player updates and gameStates? --


{ -- RANDOM NOTE --
 UE4 sees the player controller as the object that handles networking because
 user input is what is used to communicate with the server.
}


  Each client has it's own queue of requests it's sent.
  
  NOTE: Server can, if properly scheduled, pre-process changes to it's simulation and store them in a temporary location so updates sent to the clients
        occur more quickly when FFUs occur.

  Upon Receiving a client request
  {
    Assuming that the RTT (round trip time) for the client is steady, the difference between the times that request N and request N+1 are received
    shouldn't differ by more or less than the amount of time that's passed between the client sending them. This isn't realistic, but we'll work with it
    for now.
    
    Upon receiving a client request, the server stores it with a delta time equal to request_reception_time - last_request_reception_time.
  }

  Upon FFU
  {
    Server processes all client requests. Uses delta time associated with each stored request to get correct changes.
    After a single client's requests are processed, the last acknowledged update is recorded
  }
  Near the end of the FFU, the server creates replies for each client. The reply is that clients most recently acknowledged request, and
  the state calculated from all requests made by all clients.


client receives update
{
  stores the most recently validated state (the one received by the FFU)
  Discards all acknowledged requests
  reprocesses all requests, starting from the most recently acknowledged state (this will also have the issue that client delta time isn't known. Fudgable?).
  This reprocessing is done in a single frame. This way, the player doesn't experience that reprocessing
}





IDEA: Could solve the issue with delta time being unknown between client and server by having client and server apply a constant delta time
      to simulation steps between FFUs






client side request storeage
 - input for update
 - delta_time for update
 - update sequence ID

server-request storage
 - per client basis: Each client stores requests
 - Request stores
	- timestamp of reception (probably can just store delta time calculated upon arrival)
	- input string
	- request sequence ID

client stores most recently acked state












PROBLEM: I need to detect for collision each time I update an actors position. Ideally, I could process each client-actor's position
once each before checking for collision. Because I am receiving updates from each actor at differing rates (each client machine
will have different processing speeds), each update will have it's own delta time. This is the same as saying they are occuring at
different times. Thus, I cannot process all clients simultaneously.

Thus, I must store all requests in a queue. At FFU, the queue is processed, and each client's `most recently acked request ID` will
be updated as the queue is processed. After each position update, the server must make a collision check.

KEY POINT: All entities should be placed in a hashgrid at beginning of FFU. After each client-actor's position update, 
a collision check must occur.

SOLUTION: Because client-actors cannot collide with one another, it's fine for now that we would simply process their 
          inputs on a client, by client, basis. 
		  I'm still going to implement a single large queue, since this will allow for implementing
		  player collision if necassary 



PROBLEM: When do I update the position of the server-owned actors if I'm going to be batch processing client updates?

SOFT-SOLUTION: Process server-actor changes at the beginning of the FFU before we handle batched client inputs.
               This will introduce less accuracy in player collision, since each asteroid's frame will be further apart 
			   temporaly than player-actor frames.
			   So long as FFUs are done frequently enough, this may not be a serious issue
			   
			   
			   

			  
			  