

----------  KEY ---------- 
[ ] : Task. Will definitely be included in the project

( ) : Morphing task. Usually something to understand so an actual task can replace this one





[ ] I don't understand how to call other constructors from within constructors. This is causing an instantiation bug, I think



[ ] Find a better solution for controlling the state of the program. Problematic bug when looping to get servers current state sequence ID

[ ] Server is still sending snapshots as a list of actors instead of a list of actorNetData's. This should be changed

[ ] Properly compare for state's being received from server and decide on reconciliation method

[ ] Multiple actors are being spawned per a call. Mega issue

[ ] Spawned client side proxies need to not use actor ID's that conflict with those used by proper actors within the system.

[ ] createActorFromBlueprint doesn't cover make itself clear how it should be used. There are times where a client would like to not
    assign a network id but will still want other features associated with calling bIsClint = true

[ ] Modify ActorNetData and client spawning to allow for blueprint type to matter




-----------------------------------
---------- Uncategorized ---------- 
-----------------------------------
[X] Fixed-Timestep Updates for Client and Server


[x] Client sends server updates.
 	[x] How to reflect changes in client state that occur between updates?
		- SOLUTION: For movement, just rely on fixed upates and interpolation.

[X] Server sends client update game state. Client copies game state


[x] Client side interpolation
	- For now, having the client simply move actors using it's delta time, between fixed updates is an ok solution

[x] Update Server code for moving actors. Replicated movement from clients should set their actor's moveDir, not move that actor directly.
    This way, all actors are moved using some moveActor method. Better encapsulation

[x] extra data is being sent over the network each frame because sizeof(Actor) is being used where actor has
    several data members that don't need to be serialized. This should be fixed
	- Fixed by using ActorNetData struct. Sometimes extra data is sent, but makes the program safer

( ) How does actor creation fit with the comparison of states?

[ ] Client stores it's own snapshots and compares to the ones received from server when they're received
	[ ] Client Creates and stores GameStates
	[ ] Client properly unpacks Gamestates from server
	[ ] Greater Consideration must be placed into what constitutes a bad comparison between states

[ ] Client Reconciliation

[ ] Handling Actions that will often occur several times between fixed updates

[ ] Handle case where stateSequenceID's could exceed maximum value. ie. we need to wrap




NOTE: This feature is useful for rollback, but not the most important feature to be implementing
[x] Implement a circular buffer on the client, for Client state, and received server state
	[ ] Modify client's reading of packets and server's writing of packets to include the state sequence number
	[ ] Make sure stateSequenceId's cannot exceed maximum number of states. implement circular system
	[ ] Using the rate of state creation, decide on a value for MAX_STATES










-------------------------------------
---------- Spawning Actors ----------
------------------------------------- 

[x] Pre-load and cache all the meshes needed for creating actors so this isn't done when actors are spawned
	[x] Implement a static method in Actor that caches the meshes at runtime
	[ ] fix bug that is preventing the loading from being done as the first step in the client's main function	

[ ] Handle responsive client side predicted spawning of actors
	[ ] Spawning ghost actor on client side & sending spawn request. Frame data must be included in request so server knows which frame is 
	    the spawn frame.
	[ ] Ghost actor must able to be associated with network id if server proxy is successfully spawned





----------------------------------------
---------- Low Priority Tasks ----------
----------------------------------------

[ ] Move the fixed update period to the dll.

[ ] Client Reconciliation when prediction differs significantly from client state

NOTE: The game is for LAN. At the moment, simply sending each state seems to work. We'll fry other fish first
[ ] Implement State buffer on client
[ ] Design Reconciliation approach for locally generated client states differ from those predicted by the server

( ) Do we need to remove the buffer consuming loop? Fixed-Updates might solve this issue
